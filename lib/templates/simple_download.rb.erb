require 'net/http'
require 'net/https'
require 'digest/md5'

exit if defined?(Ocra)

# file_locations = ['/downloaders/1/download_file?file_path=abc.txt&download_token=7e9c36efee12b62c4bfa73da0fd1d34b1a47b8d0', '/downloaders/1/download_file?file_path=sample.txt&download_token=7e9c36efee12b62c4bfa73da0fd1d34b1a47b8d0']

file_locations = [<%= self.files.split(/[\r\n]/).collect{|file| "'/downloaders/#{self.id}/download_file?file_path=#{file}&download_token=#{self.download_token}'"}.join(',') %>]

def checksum(file_name)
  md5_checksum = ''
  begin
    f = File.new(file_name)
    begin
      md5_checksum = Digest::MD5.hexdigest(f.read)
    rescue NoMemoryError => e
      puts "\n[NOMEMORY] Failed to Allocate Memory: File Size #{f.size}"
    end
  rescue => e
    puts "Error #{e.inspect}"
  ensure
    f.close if f and not f.closed?
    f = nil
  end
  md5_checksum
end

file_locations.each_with_index do |file_location, index|
  file_done = false
  file_name = file_location.scan(/file_path=(.*?)&/).flatten.first
  folder_name = 'simple_download'
  Dir.mkdir(folder_name) unless Dir.exists?(folder_name)
  
  puts "\nProcessing File #{file_name} | #{index + 1} of #{file_locations.size}"
  error = ''
  url = URI.parse("<%= SITE_URL %>" + file_location)
  
  https = Net::HTTP.new(url.host, url.port)
  
  if url.scheme == 'https'
    https.use_ssl = true
    https.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end

  begin
    if File.exists?(File.join(folder_name, file_name))
      puts "  ...checking for completeness"
      resp, data = https.get2(file_location + "&checksum=1")
      case resp when Net::HTTPSuccess
        calculated_checksum = checksum(File.join(folder_name, file_name))
        puts "     #{calculated_checksum} [LOCAL  CHECKSUM]"
        puts "     #{resp.body} [REMOTE CHECKSUM]"
        if resp.body == calculated_checksum
          file_done = true
          puts "  ...already downloaded.   [SKIPPED]"
        else
          puts "  ...partially downloaded. [RESUME]"
        end
      else
        error = "Error: #{data}"
      end
    end
      
    unless file_done
      puts "  ...downloading #{File.basename(file_name)}"
      resp, data = https.get2(file_location)
      case resp when Net::HTTPSuccess
        open(File.join(folder_name, File.basename(file_name)), "wb"){ |file| file.write(resp.body) }
        puts "  ...download complete.    [COMPLETED]"
      else
        error = "Error: #{data}"
      end
    end
  rescue => e
    error = "Exception: #{e.to_s}"
  end
  
  puts error unless error == ''
end

puts "\n---------------------------------------------------"
puts "All #{file_locations.size} File Downloads Complete!"
puts "---------------------------------------------------"
